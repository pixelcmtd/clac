I ← λa.a
K ⇐ λab.a
KI ⇐ KI
S ⇐ λfgx.fx(gx)
C ⇐ λfxy.fyx
B ⇐ λfgx.f(gx)
M ⇐ λf.ff
ω ← M

id ← I
const ← K
flip ← C

# T ∈ Bool
T ← K
# F ∈ Bool
F ← KI
# ¬ ∈ Bool → Bool
¬ ← C
# ∧ ∈ Bool → Bool → Bool
∧ ⇐ λpq.pqp
# ∨ ∈ Bool → Bool → Bool
∨ ← M

# Nat ∈ (α → α) → α → α

# + ∈ Nat → Nat → (α → α) → α → α
# TODO: redefine using succ
+ ⇐ λmnfx.mf(nfx)
# should infer to be Nat → (α → α) → α → α and β-reduce to λnfx.f(nfx) if 1 is defined
succ ← + 1
# TODO: rethink whether to use something like \cdot instead
# * ∈ Nat → Nat → Nat
* ← B
# ^ ∈ Nat → Nat → Nat
^ ⇐ λmn.nm
# pred ∈ Nat → Nat
pred ⇐ λnfx.n(λgh.h(gf))(Kx)I
# - ∈ Nat → Nat → Nat
- ← λm n.n pred m
# ÷ ∈ Nat → Nat → Nat
÷ ⇐ λn.((λf.M(λx.f(xx)))(λcnmfx.(λd.(λn.n(λx.KI)K)d(0fx)(f(cdmfx)))(-nm)))(+n)

φ ← λn.n(λf m.m f(f 1)) succ

V ⇐ λabf.fab
pair ← V
cons ← V
fst ⇐ λx.xK
car ← fst
snd ← λx.x KI
cdr ← snd
