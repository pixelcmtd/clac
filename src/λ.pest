// TODO: unicode compliance
// TODO: more creative comments
WHITESPACE = _{ " " | "\t" | "," }
COMMENT = { "#" ~ (!NEWLINE ~ ANY)* }

mvariable = @{ !(WHITESPACE | "#" | NEWLINE | "(" | ")" | "$" | "←" | "⇐" | "λ" | "." | ";" | "∈" | "δ" | "→" | "∪" ) ~ ANY }
variable = @{ mvariable+ }
item = { variable | "(" ~ expr ~ ")" | "$" ~ expr }
mitem = { mvariable | "(" ~ mexpr ~ ")" | "$" ~ mexpr }

vardef = { variable ~ "←" ~ expr | variable ~ "⇐" ~ mexpr }

expr = { func | item+ }
mexpr = { mfunc | mitem+ }

params = { variable+ }
mparams = { mvariable+ }
body = { expr }
mbody = { mexpr }
func = { "λ" ~ params ~ "." ~ body }
mfunc = { "λ" ~ mparams ~ "." ~ mbody } //~ ("∈" ~ ty)?

//typedef = { variable ~ "∈" ~ ty }
//pty = { "(" ~ ty ~ ")" | "$" ~ ty }
//functy = { (pty | variable | unionty) ~ "→" ~ ty }
//unionty = { (pty | variable) ~ "∪"? ~ (pty | variable | unionty) }
//ty = _{ variable | pty | functy }

// TODO: typedef
statement = _{ vardef | expr }
statements = _{ SOI ~ (statement ~ (NEWLINE | ";")+)* ~ EOI | SOI ~ statement ~ EOI }

// TODO:
// we can support a μhs syntax in here too we just need an assignment that is I x ≔ x
// also we can support a maths like syntax: I: x ↦ x
