// TODO: unicode compliance
// TODO: more creative comments
WHITESPACE = _{ " " | "," }

// TODO: unicode support
mvariable = { ASCII_ALPHANUMERIC }
variable = @{ mvariable+ }
item = { variable | "(" ~ expr ~ ")" | "$" ~ expr }
mitem = { mvariable | "(" ~ mexpr ~ ")" | "$" ~ mexpr }

// TODO: μhs: ≔
vardef = { variable ~ "←" ~ expr | variable ~ "⇐" ~ mexpr }

expr = { func | item+ }
mexpr = { mfunc | mitem+ }

params = { variable+ }
mparams = { mvariable+ }
body = { expr }
mbody = { mexpr }
func = { "λ" ~ params ~ ("." | "↦" | "→") ~ body }
mfunc = { "λ" ~ mparams ~ ("." | "↦" | "→") ~ mbody }

//typedef = { variable ~ "∈" ~ ty }
//pty = { "(" ~ ty ~ ")" }
//functy = { (pty | variable | unionty) ~ "→" ~ ty }
//unionty = { (pty | variable) ~ "∪"? ~ (pty | variable | unionty) }
//ty = _{ variable | pty | functy }

// TODO: typedef
statement = _{ vardef | expr }

// TODO: we can support a μhs syntax in here too we just need an assignment that is I x ≔ x
// TODO: numbers can be their own rule and to be expanded directly during eval/¿reduction
